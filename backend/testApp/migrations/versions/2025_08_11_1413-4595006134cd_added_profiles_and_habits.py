
"""initial_migration

Revision ID: f67fdfa5d0a8
Revises:
Create Date: 2025-08-09 00:03:49.150751
========
added Profiles and Habits

Revision ID: 4595006134cd
Revises: 
Create Date: 2025-08-11 14:13:28.980118

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import geoalchemy2
from sqlalchemy.sql import text  # Добавлен импорт text


# revision identifiers, used by Alembic.
revision: str = "4595006134cd"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Сначала создаем таблицу user (без внешних ключей)
    op.create_table(
        "user",
        sa.Column("username", sa.String(length=30), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("email", sa.String(length=120), nullable=False),
        sa.Column("password", sa.String(length=128), nullable=False),
        sa.Column("email_is_confirmed", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    
    # Затем таблицы, которые ссылаются на user
    op.create_table(
        "user",
        sa.Column("username", sa.String(length=30), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("email", sa.String(length=120), nullable=False),
        sa.Column("password", sa.String(length=128), nullable=False),
        sa.Column("email_is_confirmed", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    
    op.create_table(
        "habits",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    
    op.create_table(
        "profile",
        sa.Column("username", sa.String(length=30), nullable=False),
        sa.Column("age", sa.Integer(), nullable=True),
        sa.Column("city", sa.String(), nullable=True),
        sa.Column("country", sa.String(), nullable=True),
        sa.Column("about_user", sa.String(), nullable=True),
        sa.Column("user_habits", sa.ARRAY(sa.String()), nullable=True),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    
    op.create_table(
        "user_locations",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column(
            "geom",
            geoalchemy2.types.Geometry(
                geometry_type="POINT",
                srid=4326,
                dimension=2,
                from_text="ST_GeomFromEWKT",
                name="geometry",
                nullable=False,
            ),
            nullable=False,
        ),
        sa.Column("country", sa.String(length=100), nullable=True),
        sa.Column("city", sa.String(length=100), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    

    conn = op.get_bind()
    result = conn.execute(
        text("SELECT 1 FROM pg_indexes WHERE indexname = 'idx_user_locations_geom'")
    ).scalar()

    if not result:
        op.create_index(
            "idx_user_locations_geom",
            "user_locations",
            ["geom"],
            unique=False,
            postgresql_using="gist",
        )
    
    op.create_table(
        "usersession",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("refresh_token", sa.String(), nullable=False),
        sa.Column("exp", sa.DateTime(), nullable=False),
        sa.Column("iat", sa.DateTime(), nullable=False),
        sa.Column("is_blacklisted", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("usersession")
    op.drop_index(
        "idx_user_locations_geom",
        table_name="user_locations",
        postgresql_using="gist",
    )
    op.drop_table("user_locations")
    op.drop_table("profile")
    op.drop_table("habits")
    op.drop_table("user")
